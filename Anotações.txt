================= AULA 0201 =================

Nesta aula apredemos a utilizar o React sem npm, datravés de links disponibilizados em: https://reactjs.org/docs/add-react-to-a-website.html#add-react-in-one-minute;


LINKS:

    <script crossorigin src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>

Este modo é recomendado para testes rápidos e prototipagem, inserindo os links no head do HTML;

- React Element 

Todo elemento React é criado com a função create Element . O babel é responsável por transformar o elemento criado com JSX ( que parece com HTML) em funções de React;

- Componentes  

Permitem dividir a interface em pequenos elementos. São criados através de funções que retornam elementos React ou classes que estendem React.Component e possuem o  método render retornando um elemento React.

- Composição

O princiapl motivo de criarmos componentes é para podermos compor a interface com diversos componentes que podem ser reutilizados, como por exemplo um botão que podemos usar em várias partes da nossa aplicação

- Eventos 

Podemos atribuir eventos diretamente aos elementos 

- Hooks 

Utilizamos o React pela facilidade de sincronização de estado. Antes dos hooks, isso só era possível em componentes criados por meio de classes.


================= AULA 0204 =================

Nesta aula iremos fazer uma configuração do zero para React

- Webpack 

Agrupa (bundle) o código do seu aplicativo;
Permite definirmos os componentes em diferentes arquivos para melhor organização ;
Facilita a importação de código externo instalado via NPM 

- Babel

Tranforma JSX em funções do React 
Transforma Javascript novo (const) em Javascript Antigo (var)


********* Webpack Minímo *********

 → Iniciar um pacote npm na pasta do seu aplicativo;
 → Instalar o webpack, webpack-cli, e webpack-dev-server;
 → Adicioanr os scripts de desenvolvimento e build ao package.json

    "scripts": {
        "start": "webpack serve --mode development --open --hot",
        "build": "webpack --mode production"
    },

 -Criar arquivos mínimos. Na versão 4 do dev-server é necessário indicar o caminho do arquivo index.html, criando um arquivo webpack.config.js, no qual iremos começar exportando suas configurações e dizemos que o static está na raiz;
 Agora podemos executar o npm start

********* Webpack Minímo *********

→ Instalar o react e react-dom;

********* Webpack Minímo *********

→ Instalar @babel/core, @babel/preset-react e babel-loader;
-Utilizando o babel podemos usar tags no .js como se fosse html 


================= AULA 0205 =================

Nesta aula iremos utilizar o comando create-react-app que cria um ambiente de desenvolvimento já configurado e otimizado para a criação de aplicações com React;

Para a instalação utilizaremos o npx que é um comando do npm que executa diretamente um pacote online, sem a necessidade de instalarmos o pacote em nossa máquina. A vantagem é que ele irá sempre instalar a versão mais atualizada do ambiente criado por creat-react-app


================= AULA 0206 =================

Nesta aula iremos preparar o ambiente que será utilizado durante o curso

→ Primeiramente vamos criar a aplicação através do comando npx create-react-app nomedoprojeto
→ Na pasta src deixar somente os arquivos App.js e index.js
→ No arquivo index.js excluir o reportWebVitals, o import index.css e os comentários
→ No arqquivo App.js deixar somente a div sem classe e excluir o import da logo e do css
→ Na pasta da aplicação criar uma pasta com o nome de .vscode e dentro criar um arquivo com o nome de setting.json, para esconder arquivos e deixar o ambiente mais limpo para trabalhar


================= AULA 0207 =================

Javascript XML/Extension. Estende a sintaxe do Javascript introduzindo elementos como XML que são convertidos em funções do React


- Casos especiais 

O caso especial mais comum é o atributo class. pelo fato de class ser uma palavra reservada do Javascript , o JSX resolveu mudar o nome para evitar conflitos. O correto é className

- camelCase

Atributos com nomes compostos devem ser utilizados como camelCase 
Ex: autoplay vira Autoplay 

- Expressões e variáveis

Você pode executar qualquer expressão dentro das chaves {}. Se o reesultado da expressão for um numero, string ou array de números/strings o resultado irá aparecer na tela. Booleanos (true/false), undefined e null não irão resultar em nada na tela. Objetos irão retornar erro. 

- Style 

O style irá receber um Objeto com as propriedades do elemento em camelCase

================= AULA 0208 =================

- JSX Arrays 

O JSX irá listar cada um dos itens do array. Ele nãoirá separar ou colocar vírgula, é você que deve modificar a array para o reultado desejado

- Keys

O JSX necessita de uma key única para cada elemento da array

-Map

É comum usarmos o map direto na array como uma expressão, retornandno um elemento para cada item novo da array 




